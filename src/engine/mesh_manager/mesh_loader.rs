
use super::mesh::Mesh;

pub fn load_debug_cube() -> Mesh {
    Mesh { vertices: vec![
        // front
        -1.0, -1.0,  1.0,
        1.0, -1.0,  1.0,
        1.0,  1.0,  1.0,
        -1.0,  1.0,  1.0,
        // back
        -1.0, -1.0, -1.0,
        -1.0,  1.0, -1.0,
        1.0,  1.0, -1.0,
        1.0, -1.0, -1.0,
        // top
        -1.0,  1.0, -1.0,
        -1.0,  1.0,  1.0,
        1.0,  1.0,  1.0,
        1.0,  1.0, -1.0,
        // bottom
        -1.0, -1.0, -1.0,
        1.0, -1.0, -1.0,
        1.0, -1.0,  1.0,
        -1.0, -1.0,  1.0,
        // right
        1.0, -1.0, -1.0,
        1.0,  1.0, -1.0,
        1.0,  1.0,  1.0,
        1.0, -1.0,  1.0,
        // left
        -1.0, -1.0, -1.0,
        -1.0, -1.0,  1.0,
        -1.0,  1.0,  1.0,
        -1.0,  1.0, -1.0,
    ], colors: Some(vec![
        // front
        0.583,  0.771,  0.014,  1.000,
        0.583,  0.771,  0.014,  1.000,
        0.583,  0.771,  0.014,  1.000,
        0.583,  0.771,  0.014,  1.000,
        // back
        0.609,  0.115,  0.436,  1.000,
        0.609,  0.115,  0.436,  1.000,
        0.609,  0.115,  0.436,  1.000,
        0.609,  0.115,  0.436,  1.000,
        // top
        0.327,  0.483,  0.844,  1.000,
        0.327,  0.483,  0.844,  1.000,
        0.327,  0.483,  0.844,  1.000,
        0.327,  0.483,  0.844,  1.000,
        // bottom
        0.822,  0.569,  0.201,  1.000,
        0.822,  0.569,  0.201,  1.000,
        0.822,  0.569,  0.201,  1.000,
        0.822,  0.569,  0.201,  1.000,
        // right
        0.535,  0.602,  0.923,  1.000,
        0.535,  0.602,  0.923,  1.000,
        0.535,  0.602,  0.923,  1.000,
        0.535,  0.602,  0.923,  1.000,
        // left
        0.310,  0.747,  0.185,  1.000,
        0.310,  0.747,  0.185,  1.000,
        0.310,  0.747,  0.185,  1.000,
        0.310,  0.747,  0.185,  1.000,
    ]), indices: vec![
        0,  1,  2,      0,  2,  3,    // front
        4,  5,  6,      4,  6,  7,    // back
        8,  9,  10,     8,  10, 11,   // top
        12, 13, 14,     12, 14, 15,   // bottom
        16, 17, 18,     16, 18, 19,   // right
        20, 21, 22,     20, 22, 23,   // left
    ] }
}

pub fn load_debug_d20() -> Mesh {
    let sqr5 = 5.0_f32.sqrt();
    let phi = (1.0 + sqr5) * 0.5;
    let golden_ratio = (10.0 + (2.0 * sqr5)).sqrt() / (4.0 * phi);
    let a = (1.0 / golden_ratio) * 0.5;
    let b = (1.0 / golden_ratio) / (2.0 * phi);
    Mesh { vertices: vec![
        0.0,    b,   -a,
          b,    a,  0.0,
         -b,    a,  0.0,
        0.0,    b,    a,
        0.0,   -b,    a,
         -a,  0.0,    b,
        0.0,   -b,   -a,
          a,  0.0,   -b,
          a,  0.0,    b,
         -a,  0.0,   -b,
          b,   -a,  0.0,
         -b,   -a,  0.0,
    ], colors: Some(vec![
        0.583,  0.771,  0.014,  1.000,
        0.609,  0.115,  0.436,  1.000,
        0.327,  0.483,  0.844,  1.000,
        0.822,  0.569,  0.201,  1.000,
        0.535,  0.602,  0.923,  1.000,
        0.310,  0.747,  0.185,  1.000,
        0.583,  0.771,  0.014,  1.000,
        0.609,  0.115,  0.436,  1.000,
        0.327,  0.483,  0.844,  1.000,
        0.822,  0.569,  0.201,  1.000,
        0.535,  0.602,  0.923,  1.000,
        0.310,  0.747,  0.185,  1.000,
    ]), indices: vec![
         0,  1,  2,
         3,  2,  1,
         3,  4,  5,
         3,  8,  4,
         0,  6,  7,
         0,  9,  6,
         4, 10, 11,
         6, 11, 10,
         2,  5,  9,
        11,  9,  5,
         1,  7,  8,
        10,  8,  7,
         3,  5,  2,
         3,  1,  8,
         0,  2,  9,
         0,  7,  1,
         6,  9, 11,
         6, 10,  7,
         4, 11,  5,
         4,  8, 10,
    ] }
}